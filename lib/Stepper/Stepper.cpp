/*******************************************************************************
 * INCLUDE HEADER FILES
 ******************************************************************************/
#include "Stepper.h"


/*******************************************************************************
 * CONSTANT AND MACRO DEFINITIONS USING #DEFINE
 ******************************************************************************/
 


/*******************************************************************************
 * ENUMERATIONS AND STRUCTURES AND TYPEDEFS
 ******************************************************************************/
 //static DRV8825 stepper(MOTOR_STEPS, DIR, STEP, SLEEP, MODE0, MODE1, MODE2);

typedef struct{
    int microsteps;
    int vel;
    bool dir;
}motor_t;


/*******************************************************************************
 * VARIABLES WITH GLOBAL SCOPE
 ******************************************************************************/
motor_t stepper;

/*******************************************************************************
 * FUNCTION PROTOTYPES FOR PRIVATE FUNCTIONS WITH FILE LEVEL SCOPE
 ******************************************************************************/



/*******************************************************************************
 * ROM CONST VARIABLES WITH FILE LEVEL SCOPE
 ******************************************************************************/


/*******************************************************************************
 * STATIC VARIABLES AND CONST VARIABLES WITH FILE LEVEL SCOPE
 ******************************************************************************/


/*******************************************************************************
 *******************************************************************************
    GLOBAL METHODS DEFINITIONS
 *******************************************************************************
 ******************************************************************************/
void InitMotor()
{
    stepper.microsteps = MICROSTEPS;
    stepper.dir = HORARIO;
    stepper.vel = 0;
    return;
}

int calcSpeed(int x_o, int x_f, float time)
{
    int speed;
    if(time)
    {
    speed = (x_f - x_o)/time;
    }
    else
    {
    speed = 0;
    }
    return speed;
}

void setMove(float time, bool dir, int dist)
{
    digitalWrite(DIR, dir);
    digitalWrite(STEP, HIGH);
    stepper.dir = dir;
    return;
}




/*******************************************************************************
 *******************************************************************************
 LOCAL FUNCTION DEFINITIONS
 *******************************************************************************
 ******************************************************************************/



